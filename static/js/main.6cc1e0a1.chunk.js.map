{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OAClB,4BAAIN,EAAMG,QAAQI,aCJdC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAG,cAAC,EAAD,CAAyBA,QAASA,GAArBA,EAAQC,UCHlDO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAU,SAChBa,KAAK,SACNF,YAAaA,EACbG,SAAWF,MCkCAG,G,wDAnCb,aAAc,IAAD,8BACX,gBAcFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAO,CACVb,SAAU,GACVU,YAAa,IAJJ,E,gEASO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACT,SAAUkB,S,+BAMjC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC5CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAGnD,OACC,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWW,YAAY,kBACvBC,aAAee,KAAKf,eACpB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9BRI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6cc1e0a1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props)=>(\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set1&size=180x180`} alt='monster'/>\r\n        <h2>{props.monster.name}</h2>\r\n         <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react'\r\nimport './card-list.styles.css'\r\nimport { Card } from '../card/card.component'\r\nexport const CardList = (props)=>{\r\n    return (\r\n        <div className=\"card-list\">\r\n           { props.monsters.map(monster=> <Card key = {monster.id} monster={monster} />) }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange})=>(\r\n    <input className='search'\r\n     type='search' \r\n    placeholder={placeholder}\r\n    onChange= {handleChange} />\r\n)","import React , {Component} from 'react';\nimport { CardList }  from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state= {\n      monsters: [],\n      searchField: ''\n    }\n    \n  }\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(users=> this.setState({monsters: users}))\n  }\n\n  handleChange = e=>{\n    this.setState({searchField: e.target.value})\n  }\n render(){\n  const { monsters, searchField } = this.state\n  const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )   \n\n   return (\n    <div className=\"App\">\n      <h1>Monters Rolodex</h1>\n      <SearchBox placeholder=\"Search Monsters\" \n      handleChange= {this.handleChange}/>\n      <CardList monsters={filteredMonsters}></CardList>\n    </div>\n   )\n }\n}\n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}